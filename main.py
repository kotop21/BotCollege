import logging
import datetime
import requests
import io
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from config import TOKEN
from colorama import Fore, Style, init

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è colorama
init(autoreset=True)

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    format=f"%(asctime)s - {Fore.GREEN}%(levelname)s{Style.RESET_ALL} - %(message)s",
    level=logging.INFO,
)

# –í–∏–º–∫–Ω–µ–Ω–Ω—è –ª–æ–≥—ñ–≤ HTTP-–∑–∞–ø–∏—Ç—ñ–≤ Telegram
logging.getLogger("httpx").setLevel(logging.WARNING)
logging.getLogger("telegram").setLevel(logging.WARNING)

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—å–æ–≥–æ–¥–Ω—ñ—à–Ω—å–æ—ó –¥–∞—Ç–∏ –≤ –ø–æ—Ç—Ä—ñ–±–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ
def get_today_date():
    return datetime.datetime.today().strftime('%d.%m.%Y')

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ—Ö –¥–Ω—ñ–≤ –¥–æ —Å—å–æ–≥–æ–¥–Ω—ñ—à–Ω—å–æ–≥–æ
def get_previous_dates():
    today = datetime.datetime.today()
    dates = []
    for i in range(7):  # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ 7 –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –¥–Ω—ñ–≤
        date = today - datetime.timedelta(days=i)
        dates.append(date.strftime('%d.%m.%Y'))
    return dates

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å–∫–∞—á—É–≤–∞–Ω–Ω—è —Ñ–∞–π–ª—É –∑ –∑–º—ñ–Ω–µ–Ω–æ—é –¥–∞—Ç–æ—é —ñ –∫—É—Ä—Å–æ–º
def download_file(course_number, date):
    url = f"https://ztk.org.ua/files/{course_number}-{date}.pdf"
    logging.info(f"{Fore.CYAN}üì• –ó–∞–ø–∏—Ç URL: {url}{Style.RESET_ALL}")
    response = requests.get(url)
    if response.status_code == 200:
        file_bytes = io.BytesIO(response.content)
        return file_bytes, date
    else:
        return None, None

# –û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –Ω–∞ –∫–Ω–æ–ø–∫–∏
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user = query.from_user

    try:
        await query.answer()

        course = query.data
        dates = get_previous_dates()  # –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –¥–∞—Ç
        today_date = get_today_date()

        # –ü–æ—á–∞—Ç–∫–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∞–Ω—ñ–º–∞—Ü—ñ—î—é –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
        await query.edit_message_text(
            text=f"‚è≥ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ä–æ–∑–∫–ª–∞–¥—É –¥–ª—è {course} –∫—É—Ä—Å—É... –ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞—á–µ–∫–∞–π—Ç–µ. üìÖ",
            parse_mode='Markdown'
        )

        # –®—É–∫–∞—î–º–æ –ø–µ—Ä—à–∏–π –¥–æ—Å—Ç—É–ø–Ω–∏–π —Ñ–∞–π–ª –¥–ª—è –∫—É—Ä—Å—É
        for date in dates:
            file, file_date = download_file(course, date)
            if file:
                if file_date == today_date:
                    await query.edit_message_text(
                        text=f"üéâ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ä–æ–∑–∫–ª–∞–¥—É –¥–ª—è {course} –∫—É—Ä—Å—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ! üìÖ\n\n–ù–∞–¥—Å–∏–ª–∞—é —Ñ–∞–π–ª...",
                        parse_mode='Markdown'
                    )
                else:
                    await query.edit_message_text(
                        text=f"‚ö†Ô∏è –°—å–æ–≥–æ–¥–Ω—ñ—à–Ω—ñ–π —Ä–æ–∑–∫–ª–∞–¥ –≤—ñ–¥—Å—É—Ç–Ω—ñ–π. –ù–∞–¥—Å–∏–ª–∞—é —Ä–æ–∑–∫–ª–∞–¥ –∑–∞ {file_date}. üìÖ",
                        parse_mode='Markdown'
                    )

                # –ù–∞–¥—Å–∏–ª–∞—î–º–æ —Ñ–∞–π–ª –±–µ–∑ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ
                file.seek(0)  # –í–∫–∞–∑—É—î–º–æ –Ω–∞ –ø–æ—á–∞—Ç–æ–∫ –±—É—Ñ–µ—Ä–∞ –ø–µ—Ä–µ–¥ –≤—ñ–¥–ø—Ä–∞–≤–∫–æ—é
                await query.message.reply_document(file, filename=f"schedule_{course}_{file_date}.pdf")
                return

        # –Ø–∫—â–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Ä–æ–∑–∫–ª–∞–¥ –Ω–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 7 –¥–Ω—ñ–≤
        await query.edit_message_text(
            text="‚ö†Ô∏è –û–π! –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ —Ä–æ–∑–∫–ª–∞–¥ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 7 –¥–Ω—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ. üôè",
            parse_mode='Markdown'
        )
    except Exception as e:
        logging.error(f"{Fore.RED}‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: {e}{Style.RESET_ALL}")
        await query.message.reply_text(
            text="‚ö†Ô∏è –í–∏–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∑–∞–ø–∏—Ç—É. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ. üôè",
            parse_mode='Markdown'
        )

# –ö–æ–º–∞–Ω–¥–∞ /start –¥–ª—è –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è —Ç–∞ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∫–Ω–æ–ø–æ–∫
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    logging.info(f"{Fore.BLUE}üëã –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user.full_name} (ID: {user.id}) –∑–∞–ø—É—Å—Ç–∏–≤ –∫–æ–º–∞–Ω–¥—É /start{Style.RESET_ALL}")

    keyboard = [
        [InlineKeyboardButton("1 –∫—É—Ä—Å üë∂üèª", callback_data='1'), InlineKeyboardButton("2 –∫—É—Ä—Å üë¶üèª", callback_data='2')],
        [InlineKeyboardButton("3 –∫—É—Ä—Å üë®üèª", callback_data='3'), InlineKeyboardButton("4 –∫—É—Ä—Å üë¥üèª", callback_data='4')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        text="üëã –ü—Ä–∏–≤—ñ—Ç! –í–∏–±–µ—Ä–∏ –∫—É—Ä—Å –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–æ–∑–∫–ª–∞–¥—É. üìÖ\n\n–ê–≤—Ç–æ—Ä –±–æ—Ç–∞: xxdsüéÄ‚ù§Ô∏è‚Äçüî•",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

# –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
def main():
    application = Application.builder().token(TOKEN).build()

    # –ö–æ–º–∞–Ω–¥–∞ /start
    application.add_handler(CommandHandler("start", start))

    # –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–æ–∫
    application.add_handler(CallbackQueryHandler(button))

    logging.info(f"{Fore.GREEN}üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ —Ç–∞ –≥–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏!{Style.RESET_ALL}")
    application.run_polling()

if __name__ == '__main__':
    main()
